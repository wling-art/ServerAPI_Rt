//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "ticket")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub title: String,
    #[sea_orm(column_type = "custom(\"LONGTEXT\")", nullable)]
    pub description: Option<String>,
    pub status: i16,
    pub priority: i16,
    pub created_at: DateTime,
    pub updated_at: DateTime,
    pub reported_content_id: Option<i32>,
    #[sea_orm(column_type = "custom(\"LONGTEXT\")", nullable)]
    pub report_reason: Option<String>,
    #[sea_orm(column_type = "custom(\"LONGTEXT\")", nullable)]
    pub admin_remark: Option<String>,
    pub assignee_id: Option<i32>,
    pub creator_id: i32,
    pub reported_user_id: Option<i32>,
    pub server_id: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::server::Entity",
        from = "Column::ServerId",
        to = "super::server::Column::Id",
        on_update = "Restrict",
        on_delete = "SetNull"
    )]
    Server,
    #[sea_orm(has_many = "super::ticket_log::Entity")]
    TicketLog,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::AssigneeId",
        to = "super::users::Column::Id",
        on_update = "Restrict",
        on_delete = "SetNull"
    )]
    Users3,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::CreatorId",
        to = "super::users::Column::Id",
        on_update = "Restrict",
        on_delete = "Cascade"
    )]
    Users2,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::ReportedUserId",
        to = "super::users::Column::Id",
        on_update = "Restrict",
        on_delete = "SetNull"
    )]
    Users1,
}

impl Related<super::server::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Server.def()
    }
}

impl Related<super::ticket_log::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TicketLog.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
