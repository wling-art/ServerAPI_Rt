//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "files")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub hash_value: String,
    #[sea_orm(unique)]
    pub file_path: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::gallery_image::Entity")]
    GalleryImage,
    #[sea_orm(has_many = "super::server::Entity")]
    Server,
    #[sea_orm(has_many = "super::users::Entity")]
    Users,
}

impl Related<super::gallery_image::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GalleryImage.def()
    }
}

impl Related<super::server::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Server.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

impl Model {
    /// Generate file hash from content
    pub fn generate_file_hash(file_content: &[u8]) -> String {
        use sha2::{Digest, Sha256};
        let mut hasher = Sha256::new();
        hasher.update(file_content);
        format!("{:x}", hasher.finalize())
    }
}