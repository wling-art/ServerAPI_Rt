use sea_orm::{
    ConnectOptions, ConnectionTrait, Database, DatabaseConnection as SeaOrmDatabaseConnection,
    DbErr,
};
use std::sync::Arc;
use std::time::Duration;
use tracing::info;

use crate::config::DatabaseConfig;

pub type DatabaseConnection = Arc<SeaOrmDatabaseConnection>;

pub async fn establish_connection(config: &DatabaseConfig) -> Result<DatabaseConnection, DbErr> {
    let mut opt = ConnectOptions::new(&config.url);

    // ËÆæÁΩÆËøûÊé•Ê±†ÂèÇÊï∞
    opt.max_connections(config.max_connections)
        .min_connections(config.min_connections)
        .connect_timeout(Duration::from_secs(config.connect_timeout))
        .acquire_timeout(Duration::from_secs(config.acquire_timeout))
        .idle_timeout(Duration::from_secs(config.idle_timeout))
        .max_lifetime(Duration::from_secs(28800)) // 8 hours
        .sqlx_logging(false); // ÊöÇÊó∂Á¶ÅÁî® SQL Êó•Âøó‰ª•ÈÅøÂÖçÁ±ªÂûãÈîôËØØ

    info!(
        "üîó Configuring database connection pool: min={}, max={}",
        config.min_connections, config.max_connections
    );

    let db = Database::connect(opt).await?;
    let connection = Arc::new(db);

    // È¢ÑÁÉ≠ËøûÊé•Ê±†
    if let Err(e) = warm_up_connection_pool(&connection).await {
        tracing::warn!("‚ö†Ô∏è  Failed to warm up connection pool: {}", e);
    } else {
        info!("üî• Database connection pool warmed up successfully");
    }

    Ok(connection)
}

/// È¢ÑÁÉ≠Êï∞ÊçÆÂ∫ìËøûÊé•Ê±†
async fn warm_up_connection_pool(db: &DatabaseConnection) -> Result<(), DbErr> {
    use sea_orm::Statement;

    // ÊâßË°å‰∏Ä‰∏™ÁÆÄÂçïÁöÑÊü•ËØ¢Êù•È¢ÑÁÉ≠ËøûÊé•Ê±†
    let stmt = Statement::from_string(sea_orm::DatabaseBackend::MySql, "SELECT 1".to_owned());

    // ÊâßË°åÂ§öÊ¨°Êü•ËØ¢‰ª•Á°Æ‰øùËøûÊé•Ê±†‰∏≠ÁöÑÊúÄÂ∞èËøûÊé•Êï∞ÈÉΩË¢´ÂàõÂª∫
    for i in 1..=3 {
        match db.execute(stmt.clone()).await {
            Ok(_) => {
                tracing::debug!("üî• Connection pool warm-up query {} completed", i);
            }
            Err(e) => {
                tracing::warn!("‚ö†Ô∏è  Connection pool warm-up query {} failed: {}", i, e);
                return Err(e);
            }
        }
    }

    Ok(())
}
